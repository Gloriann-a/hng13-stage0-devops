events {
    worker_connections 1024;
}

http {
    upstream app_backend {
        # Primary server (Blue) - gets all traffic first
        server app_blue:3000 max_fails=2 fail_timeout=10s;
        
        # Backup server (Green) - only used when Blue fails
        server app_green:3000 backup;
    }

    server {
        listen 8080;
        
        location / {
            proxy_pass http://app_backend;
            
            # Retry on errors, timeouts, or 5xx status codes
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 1;
            proxy_next_upstream_timeout 5s;
            
            # Fast timeouts for quick failover
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Forward all headers from the app to client
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Don't buffer responses for real-time failover
            proxy_buffering off;
        }
        
        # Health check endpoint for monitoring
        location /nginx-status {
            access_log off;
            return 200 "nginx ok\n";
            add_header Content-Type text/plain;
        }
    }
}